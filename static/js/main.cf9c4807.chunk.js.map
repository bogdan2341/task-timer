{"version":3,"sources":["store/tasksReducer/actionTypes.js","store/settingsReducer/actionTypes.js","components/ToggleDarkModeButton/index.js","store/settingsReducer/actions.js","components/AppBar/TabLabel.js","components/AppBar/AppBar.js","components/AppBar/index.js","components/TaskInput/TaskInput.js","components/TaskInput/index.js","store/tasksReducer/actions.js","utils/timeUtils.js","components/TasksList/TaskTimer.js","components/TasksList/TaskItem.js","components/TasksList/TasksList.js","components/TasksList/index.js","pages/CurrentTasks.js","components/TasksList/DoneTaskItem.js","components/TasksList/DoneTasksList.js","pages/DoneTasks.js","layouts/MainLayout.js","theme.js","App.js","store/tasksReducer/index.js","store/settingsReducer/index.js","store/index.js","index.js"],"names":["ADD_TASK","DONE_TASK","SET_TASKS","SET_DONE_TASKS","PAUSE_TASK","RESUME_TASK","DELETE_DONE_TASK","TOGGLE_DARK_MODE","SET_DARK_THEME","useStyles","makeStyles","theme","root","position","top","spacing","right","ToggleDarkModeButton","classes","dispatch","useDispatch","isDark","useSelector","store","settings","IconButton","className","onClick","type","htmlColor","TabLabel","count","title","useTheme","style","backgroundColor","palette","secondary","main","borderRadius","padding","marginLeft","AppBar","tabValue","tabChangeHandler","currentTasks","tasks","doneTasks","background","paper","Toolbar","Typography","variant","margin","Tabs","value","onChange","indicatorColor","centered","Tab","label","length","display","justifyContent","textField","flexGrow","marginRight","InputNewTask","TaskInput","useState","setTitle","saveTimerHandler","taskTitle","moment","format","id","startingTime","payload","pausingTime","isPaused","addTask","Math","random","toString","substr","Date","now","Paper","TextField","e","target","onKeyPress","event","key","Button","color","msToTime","ms","h","floor","duration","asHours","m","minutes","s","seconds","TaskTimer","props","time","setTime","useEffect","timer","clearInterval","setInterval","marginTop","alignItems","transition","paused","action","disabled","grey","TaskItem","onPauseHandler","timerId","pauseTask","clsx","onDone","TaskList","TasksList","timers","map","el","doneTime","doneTask","CurrentTasksTimers","paddingRight","textAlign","DoneTaskItem","workTime","Card","CardContent","gutterBottom","humanize","onDelete","DoneTasksList","DoneTasks","TabPanel","children","index","other","hidden","Box","p","tabPanel","maxWidth","breakpoints","down","MainLayout","setTabValue","loadDataFromLocalStorage","JSON","parse","localStorage","getItem","doneTasksArray","tasksArray","setItem","stringify","newValue","CurrentTasks","useAppTheme","console","log","createMuiTheme","primary","indigo","pink","App","useLayoutEffect","setDarkTheme","ThemeProvider","CssBaseline","initialState","tasksReducer","state","find","t","filter","dt","pallet","settingsReducer","createStore","combineReducers","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cf9c4807.chunk.js","sourcesContent":["export const ADD_TASK = \"ADD_TASK\";\nexport const DONE_TASK = \"DONE_TASK\";\nexport const SET_TASKS = \"SET_TASKS\";\nexport const SET_DONE_TASKS = \"SET_DONE_TASKS\";\nexport const PAUSE_TASK = \"PAUSE_TASK\";\nexport const RESUME_TASK = \"RESUME_TASK\";\nexport const DELETE_DONE_TASK = \"DELETE_DONE_TASK\";\n","export const TOGGLE_DARK_MODE = \"TOGGLE_DARK_MODE\";\nexport const SET_DARK_THEME = \"SET_DARK_THEME\";\n","import { IconButton, makeStyles } from \"@material-ui/core\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Sun from \"@material-ui/icons/Brightness5\";\nimport Moon from \"@material-ui/icons/Brightness4\";\nimport { toggleDarkMode } from \"../../store/settingsReducer/actions\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    position: \"absolute\",\n    top: theme.spacing(0.5),\n    right: theme.spacing(1),\n  },\n}));\n\nfunction ToggleDarkModeButton() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const isDark = useSelector((store) => store.settings.isDark);\n  return (\n    <IconButton\n      className={classes.root}\n      onClick={() => dispatch(toggleDarkMode())}\n    >\n      {isDark ? <Sun /> : <Moon htmlColor=\"#fff\" />}\n    </IconButton>\n  );\n}\n\nexport default ToggleDarkModeButton;\n","import { SET_DARK_THEME, TOGGLE_DARK_MODE } from \"./actionTypes\";\n\nexport const toggleDarkMode = () => {\n  return {\n    type: TOGGLE_DARK_MODE,\n  };\n};\n\nexport const setDarkTheme = (isDark) => {\n  return {\n    type: SET_DARK_THEME,\n    payload: { isDark },\n  };\n};\n","import { useTheme } from \"@material-ui/core\";\n\nfunction TabLabel({ count, title }) {\n  const theme = useTheme();\n  return (\n    <div>\n      {title}\n      {!!count && (\n        <span\n          style={{\n            backgroundColor: theme.palette.secondary.main,\n            borderRadius: \"1rem\",\n            padding: \".1em .4em\",\n            marginLeft: \".4rem\",\n          }}\n        >\n          {count}\n        </span>\n      )}\n    </div>\n  );\n}\n\nexport default TabLabel;\n","import {\n  AppBar as AppBarMUI,\n  Toolbar,\n  Typography,\n  Tabs,\n  Tab,\n  useTheme,\n} from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport ToggleDarkModeButton from \"../ToggleDarkModeButton\";\nimport TabLabel from \"./TabLabel\";\n\nfunction AppBar({ tabValue, tabChangeHandler }) {\n  const isDark = useSelector(({ settings }) => settings.isDark);\n  const currentTasks = useSelector(({ tasks }) => tasks.currentTasks);\n  const doneTasks = useSelector(({ tasks }) => tasks.doneTasks);\n\n  const theme = useTheme();\n  return (\n    <AppBarMUI\n      position=\"sticky\"\n      style={{ backgroundColor: isDark && theme.palette.background.paper }}\n    >\n      <Toolbar>\n        <Typography variant=\"h5\" style={{ margin: \"auto\" }}>\n          Tasks Timer\n        </Typography>\n        <ToggleDarkModeButton />\n      </Toolbar>\n      <Tabs\n        value={tabValue}\n        onChange={tabChangeHandler}\n        indicatorColor=\"secondary\"\n        centered\n      >\n        <Tab label={<TabLabel count={currentTasks.length} title=\"Current\" />} />\n        <Tab label={<TabLabel count={doneTasks.length} title=\"Done\" />} />\n      </Tabs>\n    </AppBarMUI>\n  );\n}\n\nexport default AppBar;\n","import AppBar from \"./AppBar\";\nexport default AppBar;\n","import { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Button, makeStyles, Paper, TextField } from \"@material-ui/core\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport moment from \"moment\";\nimport { addTask } from \"../../store/tasksReducer/actions\";\n\nconst genUID = () => Math.random().toString(36).substr(2, 9);\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: theme.spacing(2),\n    display: \"flex\",\n    justifyContent: \"space-between\",\n  },\n  textField: {\n    flexGrow: 2,\n    marginRight: theme.spacing(1),\n  },\n}));\n\nfunction InputNewTask() {\n  const [title, setTitle] = useState(\"\");\n  const dispatch = useDispatch();\n  const classes = useStyles();\n\n  const keyDownHandler = (event) => {\n    if (event.key === \"Enter\") {\n      saveTimerHandler();\n    }\n  };\n\n  const saveTimerHandler = () => {\n    const taskTitle = title || `Task#[${moment().format(\"HH:mm:ss\")}]`;\n    setTitle(\"\");\n    return dispatch(addTask(genUID(), taskTitle, Date.now()));\n  };\n\n  return (\n    <Paper className={classes.root}>\n      <TextField\n        variant=\"outlined\"\n        className={classes.textField}\n        type=\"text\"\n        onChange={(e) => setTitle(e.target.value)}\n        value={title}\n        label=\"Task title\"\n        onKeyPress={keyDownHandler}\n      />\n      <Button onClick={saveTimerHandler} variant=\"contained\" color=\"primary\">\n        <AddIcon />\n      </Button>\n    </Paper>\n  );\n}\n\nexport default InputNewTask;\n","import TaskInput from \"./TaskInput\";\nexport default TaskInput;\n","import { ADD_TASK, DELETE_DONE_TASK, DONE_TASK, PAUSE_TASK, RESUME_TASK, SET_DONE_TASKS, SET_TASKS } from \"./actionTypes\";\n\nexport const addTask = (id, title, startingTime) => {\n  return {\n    type: ADD_TASK,\n    payload: {\n      id,\n      title,\n      startingTime,\n      pausingTime: 0,\n      isPaused: false,\n    },\n  };\n};\n\nexport const doneTask = (id, doneTime = Date.now()) => {\n  return {\n    type: DONE_TASK,\n    payload: {\n      id,\n      doneTime,\n    },\n  };\n};\n\nexport const pauseTask = (id, time) => {\n  return {\n    type: PAUSE_TASK,\n    payload: {\n      id,\n      time,\n    },\n  };\n};\n\nexport const resumeTask = (id, time) => {\n  return {\n    type: RESUME_TASK,\n    payload: {\n      id,\n      time,\n    },\n  };\n};\n\nexport const setTasks = (tasksArray) => {\n  return {\n    type: SET_TASKS,\n    payload: {\n      tasksArray,\n    },\n  };\n};\n\nexport const setDoneTasks = (doneTasksArray) => {\n  return {\n    type: SET_DONE_TASKS,\n    payload: {\n      doneTasksArray,\n    },\n  };\n};\n\nexport const deleteDoneTask = (id) => {\n  return {\n    type: DELETE_DONE_TASK,\n    payload: {\n      id,\n    },\n  };\n};\n","import moment from \"moment\";\n\nexport const msToTime = (ms) => {\n  let h = Math.floor(moment.duration(ms).asHours());\n  let m = moment.duration(ms).minutes();\n  let s = moment.duration(ms).seconds();\n  h = h < 10 ? \"0\" + h : h;\n  m = m < 10 ? \"0\" + m : m;\n  s = s < 10 ? \"0\" + s : s;\n\n  return `${h}:${m}:${s}`;\n};\n","import { msToTime } from \"../../utils/timeUtils\";\nimport { useEffect, useState } from \"react\";\n\nfunction TaskTimer(props) {\n  const [time, setTime] = useState(0);\n\n  const runTimer = () => {\n    setTime(Date.now() - props.startingTime);\n  };\n\n  useEffect(() => {\n    let timer;\n    if (!props.isPaused) {\n      timer = setInterval(() => runTimer(), 100);\n    } else {\n      clearInterval(timer);\n      setTime(props.pausingTime - props.startingTime);\n    }\n    return () => {\n      clearInterval(timer);\n    };\n  }, [props.isPaused]);\n  \n  return <span>{msToTime(time)}</span>;\n}\n\nexport default TaskTimer;\n","import { IconButton, Paper, Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core\";\nimport DoneIcon from \"@material-ui/icons/Done\";\nimport PlayIcon from \"@material-ui/icons/PlayArrow\";\nimport PauseIcon from \"@material-ui/icons/Pause\";\nimport TaskTimer from \"./TaskTimer\";\nimport { useDispatch } from \"react-redux\";\nimport clsx from \"clsx\";\nimport { pauseTask, resumeTask } from \"../../store/tasksReducer/actions\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: theme.spacing(2),\n    marginTop: theme.spacing(1),\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    transition: \".2s ease-in\",\n  },\n  paused: {\n    color: theme.palette.action.disabled,\n    backgroundColor:\n      theme.palette.type === \"dark\"\n        ? theme.palette.grey[\"A700\"]\n        : theme.palette.grey[100],\n    transition: \".2s ease-out\",\n  },\n}));\n\nfunction TaskItem(props) {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  const onPauseHandler = () => {\n    if (props.isPaused) {\n      return dispatch(resumeTask(props.timerId, Date.now()));\n    } else {\n      return dispatch(pauseTask(props.timerId, Date.now()));\n    }\n  };\n\n  return (\n    <Paper className={clsx(classes.root, { [classes.paused]: props.isPaused })}>\n      <Typography variant=\"body1\">{props.title}</Typography>\n      <div>\n        <TaskTimer\n          startingTime={props.startingTime}\n          isPaused={props.isPaused}\n          pausingTime={props.pausingTime}\n        />\n        <IconButton onClick={() => onPauseHandler()}>\n          {props.isPaused ? (\n            <PlayIcon color=\"primary\" />\n          ) : (\n            <PauseIcon color=\"primary\" />\n          )}\n        </IconButton>\n        <IconButton onClick={props.onDone}>\n          <DoneIcon color=\"primary\" />\n        </IconButton>\n      </div>\n    </Paper>\n  );\n}\n\nexport default TaskItem;\n","import { useDispatch } from \"react-redux\";\nimport TaskItem from \"./TaskItem\";\nimport { doneTask } from \"../../store/tasksReducer/actions\";\n\nfunction TaskList(props) {\n  const dispatch = useDispatch();\n\n  return props.timers.map((el) => (\n      <TaskItem\n        key={el.id}\n        onDone={() => dispatch(doneTask(el.id))}\n        isPaused={el.isPaused}\n        startingTime={el.startingTime}\n        pausingTime={el.pausingTime}\n        timerId={el.id}\n        title={el.title}\n      />\n    ))\n}\n\nexport default TaskList;\n","import TasksList from \"./TasksList\";\nexport default TasksList;\n","import { Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport TaskInput from \"../components/TaskInput\";\nimport TasksList from \"../components/TasksList\";\n\nfunction CurrentTasksTimers() {\n  const currentTasks = useSelector(({tasks}) => tasks.currentTasks);\n\n  return (\n    <>\n      <TaskInput />\n      {currentTasks.length ? (\n        <TasksList timers={currentTasks} />\n      ) : (\n        <Typography\n          variant=\"body1\"\n          color=\"textSecondary\"\n          style={{ marginTop: \"3em\" }}\n        >\n          Add new task\n        </Typography>\n      )}\n    </>\n  );\n}\n\nexport default CurrentTasksTimers;\n","import { Card, CardContent, IconButton, Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport moment from \"moment\";\nimport { msToTime } from \"../../utils/timeUtils\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    marginTop: theme.spacing(1),\n    paddingRight: theme.spacing(1),\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    textAlign: \"left\",\n    transition: \".2s ease-in\",\n  },\n}));\n\nfunction DoneTaskItem(props) {\n  const classes = useStyles();\n  let workTime;\n  if (props.isPaused) {\n    workTime = props.pausingTime - props.startingTime;\n  } else {\n    workTime = props.doneTime - props.startingTime;\n  }\n\n  return (\n    <Card className={classes.root}>\n      <CardContent>\n        <Typography color=\"textSecondary\" variant=\"body2\" gutterBottom>\n          Done{\" \"}\n          {moment.duration(-(Date.now() - props.doneTime)).humanize(true)}\n        </Typography>\n        <Typography variant=\"body1\">{props.title}</Typography>\n        <Typography color=\"textSecondary\" variant=\"body2\" gutterBottom>\n          {msToTime(workTime)}\n        </Typography>\n      </CardContent>\n      <IconButton onClick={props.onDelete}>\n        <CloseIcon color=\"error\" />\n      </IconButton>\n    </Card>\n  );\n}\n\nexport default DoneTaskItem;\n","import { useDispatch } from \"react-redux\";\nimport { deleteDoneTask } from \"../../store/tasksReducer/actions\";\nimport DoneTaskItem from \"./DoneTaskItem\";\n\nfunction DoneTasksList(props) {\n  const dispatch = useDispatch();\n\n  return props.doneTasks.map((el) => (\n      <DoneTaskItem\n        key={el.id}\n        onDelete={() => dispatch(deleteDoneTask(el.id))}\n        startingTime={el.startingTime}\n        doneTime={el.doneTime}\n        pausingTime={el.pausingTime}\n        isPaused={el.isPaused}\n        timerId={el.id}\n        title={el.title}\n      />\n    ))\n}\n\nexport default DoneTasksList;\n","import { Typography } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport DoneTasksList from \"../components/TasksList/DoneTasksList\";\n\nfunction DoneTasks() {\n  const doneTasks = useSelector(({tasks}) => tasks.doneTasks);\n\n  return (\n    <>\n      {doneTasks.length ? (\n        <DoneTasksList doneTasks={doneTasks} />\n      ) : (\n        <Typography\n          variant=\"body1\"\n          color=\"textSecondary\"\n          style={{ marginTop: \"3em\" }}\n        >\n          Deleted tasks not exist\n        </Typography>\n      )}\n    </>\n  );\n}\n\nexport default DoneTasks;\n","import { makeStyles, Box } from \"@material-ui/core\";\nimport { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setDoneTasks, setTasks } from \"../store/tasksReducer/actions\";\nimport AppBar from \"../components/AppBar\";\nimport CurrentTasksTimers from \"../pages/CurrentTasks\";\nimport DoneTasks from \"../pages/DoneTasks\";\n\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div hidden={value !== index} {...other}>\n      {value === index && <Box p={3}>{children}</Box>}\n    </div>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  tabPanel: {\n    maxWidth: \"560px\",\n    textAlign: \"center\",\n    margin: \"auto\",\n    [theme.breakpoints.down(\"xs\")]: {},\n  },\n}));\n\nfunction MainLayout({ children }) {\n  const dispatch = useDispatch();\n  const currentTasks = useSelector((store) => store.tasks.currentTasks);\n  const doneTasks = useSelector((store) => store.tasks.doneTasks);\n  const classes = useStyles();\n  const [tabValue, setTabValue] = useState(0);\n\n  const tabChangeHandler = (event, newValue) => {\n    setTabValue(newValue);\n  };\n\n  const loadDataFromLocalStorage = () => {\n    const doneTasks = JSON.parse(localStorage.getItem(\"deletedTimers\"));\n    const tasks = JSON.parse(localStorage.getItem(\"timers\"));\n    if (doneTasks && doneTasks.length) {\n      dispatch(setDoneTasks(doneTasks));\n    }\n    if (tasks && tasks.length) {\n      dispatch(setTasks(tasks));\n    }\n  };\n\n  useEffect(() => {\n    loadDataFromLocalStorage();\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"timers\", JSON.stringify(currentTasks));\n  }, [currentTasks]);\n\n  useEffect(() => {\n    localStorage.setItem(\"deletedTimers\", JSON.stringify(doneTasks));\n  }, [doneTasks]);\n\n  return (\n    <>\n      <AppBar tabChangeHandler={tabChangeHandler} tabValue={tabValue} />\n      <div className={classes.tabPanel}>\n        <TabPanel value={tabValue} index={0}>\n          <CurrentTasksTimers />\n        </TabPanel>\n        <TabPanel value={tabValue} index={1}>\n          <DoneTasks />\n        </TabPanel>\n      </div>\n    </>\n  );\n}\n\nexport default MainLayout;\n","import { createMuiTheme } from \"@material-ui/core\";\nimport { indigo, purple, pink, amber } from \"@material-ui/core/colors\";\n\nexport function isDark() {}\n\nfunction useAppTheme(isDark) {\n  console.log(isDark);\n  if (typeof isDark === \"undefined\") {\n    isDark = localStorage.getItem(\"theme\") === \"dark\";\n  }\n  const theme = createMuiTheme({\n    palette: {\n      type: isDark ? \"dark\" : \"light\",\n      primary: {\n        main: isDark ? indigo[400] : indigo[500],\n      },\n      secondary: {\n        main: isDark ? indigo[400] : pink[\"A100\"],\n      },\n    },\n  });\n\n  return theme;\n}\n\nexport default useAppTheme;\n","import { CssBaseline, ThemeProvider } from \"@material-ui/core\";\nimport { useEffect, useLayoutEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport MainLayout from \"./layouts/MainLayout\";\nimport { setDarkTheme } from \"./store/settingsReducer/actions\";\nimport useAppTheme from \"./theme\";\n\nfunction App() {\n  const dispatch = useDispatch();\n  const isDark = useSelector(({ settings }) => settings.isDark);\n\n  useLayoutEffect(() => {\n    const isDark = localStorage.getItem(\"theme\") === \"dark\";\n    dispatch(setDarkTheme(isDark));\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"theme\", isDark ? \"dark\" : \"light\");\n  }, [isDark]);\n\n  return (\n    <ThemeProvider theme={useAppTheme(isDark)}>\n      <CssBaseline />\n      <MainLayout />\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import {\n  ADD_TASK, DELETE_DONE_TASK, DONE_TASK, PAUSE_TASK, RESUME_TASK, SET_DONE_TASKS, SET_TASKS, \n} from \"./actionTypes\";\n\nconst initialState = {\n  currentTasks: [],\n  doneTasks: [],\n};\n\nfunction tasksReducer(state = initialState, { payload, type }) {\n  switch (type) {\n    case ADD_TASK:\n      return {\n        ...state,\n        currentTasks: [payload, ...state.currentTasks],\n      };\n    case DONE_TASK:\n      const doneTask = state.currentTasks.find((t) => t.id === payload.id);\n      if (doneTask) {\n        return {\n          ...state,\n          currentTasks: state.currentTasks.filter((t) => t.id !== payload.id),\n          doneTasks: [\n            { ...doneTask, doneTime: payload.doneTime },\n            ...state.doneTasks,\n          ],\n        };\n      } else {\n        return {\n          ...state,\n        };\n      }\n    case RESUME_TASK:\n      return {\n        ...state,\n        currentTasks: state.currentTasks.map((t) => {\n          if (t.id === payload.id) {\n            return {\n              ...t,\n              isPaused: false,\n              pausingTime: 0,\n              startingTime: t.startingTime + (payload.time - t.pausingTime),\n            };\n          } else {\n            return t;\n          }\n        }),\n      };\n    case PAUSE_TASK:\n      return {\n        ...state,\n        currentTasks: state.currentTasks.map((t) => {\n          if (t.id === payload.id) {\n            return { ...t, isPaused: true, pausingTime: payload.time };\n          } else {\n            return t;\n          }\n        }),\n      };\n    case SET_TASKS:\n      return {\n        ...state,\n        currentTasks: payload.tasksArray,\n      };\n    case SET_DONE_TASKS:\n      return {\n        ...state,\n        doneTasks: payload.doneTasksArray,\n      };\n    case DELETE_DONE_TASK:\n      return {\n        ...state,\n        doneTasks: state.doneTasks.filter((dt) => dt.id !== payload.id),\n      };\n    default:\n      return state;\n  }\n}\n\nexport default tasksReducer;\n","import { SET_DARK_THEME, TOGGLE_DARK_MODE } from \"./actionTypes\";\n\nconst initialState = {\n  isDark: false,\n  pallet: {\n    primary: \"#3f51b5\",\n    secondary: \"#ab47bc\",\n  },\n};\n\nconst settingsReducer = (state = initialState, { type, payload }) => {\n  switch (type) {\n    case TOGGLE_DARK_MODE:\n      return {\n        ...state,\n        isDark: !state.isDark,\n      };\n    case SET_DARK_THEME:\n      return {\n        ...state,\n        isDark: payload.isDark,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default settingsReducer;\n","import { createStore, combineReducers } from \"redux\";\nimport tasksReducer from \"./tasksReducer\";\nimport settingsReducer from \"./settingsReducer\";\n\nexport default createStore(\n  combineReducers({\n    tasks: tasksReducer,\n    settings: settingsReducer,\n  })\n);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"fontsource-roboto\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}